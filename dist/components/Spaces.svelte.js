import './Spaces.svelte.css.proxy.js';
/* src/components/Spaces.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	space
} from "../../_snowpack/pkg/svelte/internal.js";

import { db } from '../db.svelte.js';

function create_if_block(ctx) {
	let section;
	let h3;
	let t1;
	let p;

	return {
		c() {
			section = element("section");
			h3 = element("h3");
			h3.textContent = "What am I?";
			t1 = space();
			p = element("p");
			p.textContent = `I am a ${/*whatIAm*/ ctx[0]}.`;
			attr(section, "class", "spaces svelte-8ssi7d");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, h3);
			append(section, t1);
			append(section, p);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*whatIAm*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*whatIAm*/ ctx[0]) if_block.p(ctx, dirty);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self) {
	const { spaces } = db;

	const whatIAm = spaces.length > 1
	? `${spaces.slice(0, -1).join(', ')} and a ${spaces[spaces.length - 1]}`.toLowerCase()
	: spaces.length === 1 ? spaces[0].toLowerCase() : null;

	return [whatIAm];
}

class Spaces extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Spaces;