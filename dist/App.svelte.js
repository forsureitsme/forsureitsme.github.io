import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.46.4 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import Header from './components/Header.svelte.js';
import Container from './components/Container.svelte.js';
import Glass from './components/Glass.svelte.js';
import Background from './components/Background.svelte.js';
import Spaces from './components/Spaces.svelte.js';
import Techs from './components/Techs.svelte.js';

function create_default_slot_1(ctx) {
	let main;
	let header;
	let t0;
	let spaces;
	let t1;
	let techs;
	let current;
	header = new Header({});
	spaces = new Spaces({});
	techs = new Techs({});

	return {
		c() {
			main = element("main");
			create_component(header.$$.fragment);
			t0 = space();
			create_component(spaces.$$.fragment);
			t1 = space();
			create_component(techs.$$.fragment);
			attr(main, "class", "svelte-16fhtm8");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			mount_component(header, main, null);
			append(main, t0);
			mount_component(spaces, main, null);
			append(main, t1);
			mount_component(techs, main, null);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(spaces.$$.fragment, local);
			transition_in(techs.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(header.$$.fragment, local);
			transition_out(spaces.$$.fragment, local);
			transition_out(techs.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(header);
			destroy_component(spaces);
			destroy_component(techs);
		}
	};
}

// (12:2) <Container>
function create_default_slot(ctx) {
	let glass;
	let current;

	glass = new Glass({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(glass.$$.fragment);
		},
		m(target, anchor) {
			mount_component(glass, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const glass_changes = {};

			if (dirty & /*$$scope*/ 1) {
				glass_changes.$$scope = { dirty, ctx };
			}

			glass.$set(glass_changes);
		},
		i(local) {
			if (current) return;
			transition_in(glass.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(glass.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(glass, detaching);
		}
	};
}

function create_fragment(ctx) {
	let background;
	let t;
	let div;
	let container;
	let current;
	background = new Background({});

	container = new Container({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(background.$$.fragment);
			t = space();
			div = element("div");
			create_component(container.$$.fragment);
			attr(div, "class", "app svelte-16fhtm8");
		},
		m(target, anchor) {
			mount_component(background, target, anchor);
			insert(target, t, anchor);
			insert(target, div, anchor);
			mount_component(container, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const container_changes = {};

			if (dirty & /*$$scope*/ 1) {
				container_changes.$$scope = { dirty, ctx };
			}

			container.$set(container_changes);
		},
		i(local) {
			if (current) return;
			transition_in(background.$$.fragment, local);
			transition_in(container.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(background.$$.fragment, local);
			transition_out(container.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(background, detaching);
			if (detaching) detach(t);
			if (detaching) detach(div);
			destroy_component(container);
		}
	};
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default App;